import telebot
import schedule
import time
import requests
from datetime import datetime
import pytz
import logging
from requests.exceptions import ConnectionError

logging.basicConfig(level=logging.INFO)
bot = telebot.TeleBot('7783596961:AAFhPxwNsjX0s2woiv0tPL7W9Gk-s5Kb7Nk')
API_KEY = '4348b5adfe229797d37b8d2f1cec1503'
chat_id = None

def get_current_time():
    kyiv_tz = pytz.timezone('Europe/Kiev')
    current_time = datetime.now(kyiv_tz).strftime("%H:%M")
    return current_time

def get_weather():
    url = f'http://api.openweathermap.org/data/2.5/weather?q=Lviv,UA&appid={API_KEY}&units=metric&lang=ua'
    response = requests.get(url)
    if response.status_code == 200:
        weather_data = response.json()
        temp = int(weather_data["main"]["temp"])
        weather_description = weather_data["weather"][0]["description"]
        wind_speed = weather_data["wind"]["speed"]

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö –ø—Ä–æ –æ–ø–∞–¥–∏
        rain_amount = weather_data.get("rain", {}).get("1h", None)
        if rain_amount is not None:
            rain_probability = min(int(rain_amount * 10), 100)
        else:
            rain_probability = 0

        message = (
            f"üìç *–ü–æ–≥–æ–¥–∞ —É –õ—å–≤–æ–≤—ñ*\n"
            f"üïí –ß–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {get_current_time()}\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
            f"üå§Ô∏è –û–ø–∏—Å: {weather_description.capitalize()}\n"
            f"üí® –í—ñ—Ç–µ—Ä: {wind_speed} –º/—Å\n"
            f"üåßÔ∏è –Ü–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤: {rain_probability}%"
        )
        return message
    else:
        logging.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É.")
        return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É."

@bot.message_handler(commands=['start'])
def main(message):
    global chat_id
    chat_id = message.chat.id
    bot.send_message(chat_id, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π! –Ø –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º—É –ø–æ–≥–æ–¥—É —É –õ—å–≤–æ–≤—ñ –≤ 7:00, 14:00 —Ç–∞ 20:00.", reply_markup=get_weather_button())

@bot.my_chat_member_handler()
def added_to_chat(message):
    global chat_id
    if message.new_chat_member.status == "member":
        chat_id = message.chat.id
        bot.send_message(chat_id, "–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–µ–ø–µ—Ä —É –≤–∞—à–æ–º—É —á–∞—Ç—ñ —ñ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º—É –ø–æ–≥–æ–¥—É —É –õ—å–≤–æ–≤—ñ –≤ 7:00, 14:00 —Ç–∞ 20:00.", reply_markup=get_weather_button())

def get_weather_button():
    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    weather_button = telebot.types.KeyboardButton("–ì–ª—è–Ω—É –ø–æ–≥–æ–¥—É –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑")
    markup.add(weather_button)
    return markup

@bot.message_handler(func=lambda message: message.text == "–ì–ª—è–Ω—É –ø–æ–≥–æ–¥—É –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑")
def send_weather_now(message):
    weather = get_weather()
    bot.send_message(message.chat.id, weather, parse_mode='Markdown')

def send_scheduled_weather():
    if chat_id:
        weather = get_weather()
        try:
            bot.send_message(chat_id, weather, parse_mode='Markdown')
        except ConnectionError as e:
            logging.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–ª–µ–º–∏ –∑—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è–º: %s", e)

# –†–æ–∑–∫–ª–∞–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
schedule.every().day.at("07:00").do(send_scheduled_weather)
schedule.every().day.at("14:00").do(send_scheduled_weather)
schedule.every().day.at("20:00").do(send_scheduled_weather)

def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(1)

def run_bot():
    while True:
        try:
            bot.polling(none_stop=True, timeout=5)
        except Exception as e:
            logging.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞: %s", e)
            time.sleep(15)  # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º

if __name__ == '__main__':
    import threading

    scheduler_thread = threading.Thread(target=run_scheduler)
    bot_thread = threading.Thread(target=run_bot)

    scheduler_thread.start()
    bot_thread.start()

    scheduler_thread.join()
    bot_thread.join()
